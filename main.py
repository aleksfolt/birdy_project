from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import telebot
from telebot import types
import json
import time
from os import path
import random
from PIL import Image
from io import BytesIO
import os
import logging

def config_func():
	with open('config.json', 'r', encoding='utf-8') as file:
		data = json.load(file)
	return data

—Åonfig_data = config_func()

bot = telebot.TeleBot(—Åonfig_data['token'])
telebot.apihelper.READ_TIMEOUT = 60

DATA_FILE = 'tea_data_2.json'
DATA_FILE_2 = 'users_cards.json'
DATA_FILE_3 = "promo.json"
tea_names = —Åonfig_data['tea_names']
birds = —Åonfig_data['birds']
products = —Åonfig_data['products']
user_button = {}

if not path.exists(DATA_FILE):
	with open(DATA_FILE, 'w') as f:
		json.dump({}, f)

if not path.exists(DATA_FILE_3):
	with open(DATA_FILE_3, 'w') as f:
		json.dump({}, f)

if not path.exists(DATA_FILE_2):
	with open(DATA_FILE_2, 'w') as f:
		json.dump({}, f)

if not path.exists("user_coins.json"):
	with open("user_coins.json", 'w') as f:
		json.dump({}, f)


def load_data():
	with open(DATA_FILE, 'r') as f:
		return json.load(f)

def load_data_cards():
	with open(DATA_FILE_2, 'r') as f:
		return json.load(f)


def save_data(data):
	with open(DATA_FILE, 'w') as f:
		json.dump(data, f)


def save_data_2(data):
	try:
		with open(DATA_FILE_2, 'w') as f:
			json.dump(data, f)
		print("Data successfully saved.")
	except Exception as e:
		print(f"Failed to save data: {e}")


@bot.message_handler(commands=['start'])
def start_command(message):
	first_name = message.from_user.first_name
	text = f'''
–•–µ–µ–π üê¶ {first_name}! –Ø Birdy.

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
/profile, "–ü—Ä–æ—Ñ–∏–ª—å" - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/chai, "–ß–∞–π" - –≤—ã–ø–∏—Ç—å —á–∞–π
/chai\_top, "–¢–æ–ø —á–∞—è" - —Ç–æ–ø –ø–æ —á–∞—é
/knock, "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É" - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏"
/cards\_top "–¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫" - —Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø–æ–∏–Ω—Ç–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
/krone, "–ú–æ–Ω–µ—Ç–∞", "–ö—Ä–æ–Ω–∞" - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
/shop, "–ú–∞–≥–∞–∑–∏–Ω" - –º–∞–≥–∞–∑–∏–Ω, —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∑–∞ –º–æ–Ω–µ—Ç—ã
/goods, "–ü–æ–∫—É–ø–∫–∏" - –≤–∞—à–∏ –ø–æ–∫—É–ø–∫–∏

–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º [—Ç—É—Ç](https://teletype.in/@hlb_folt/jNICgr9tP50).
	'''
	bot.send_message(message.chat.id, text, parse_mode='Markdown', disable_web_page_preview=True)


def update_user_data(user_id, username, coins=0, purchase=None, last_request_time=None):
	try:
		with open("user_coins.json", 'r') as file:
			data = json.load(file)
	except FileNotFoundError:
		data = {}

	if user_id not in data:
		data[user_id] = {"username": username, "coins": 0, "purchases": [], "last_request_time": 0}

	data[user_id]['coins'] += coins
	if purchase:
		data[user_id]['purchases'].append(purchase)
	if last_request_time is not None:
		data[user_id]['last_request_time'] = last_request_time

	with open("user_coins.json", 'w') as file:
		json.dump(data, file, indent=4)


def chai_top(message):
	try:
		data = load_data()
		sorted_data = sorted(data.items(), key=lambda x: x[1]['total_volume'], reverse=True)
		top_10 = sorted_data[:10]

		message_text = "–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–º—É –≤—ã–ø–∏—Ç–æ–≥–æ —á–∞—è:\n\n"
		for i, (user_id, user_data) in enumerate(top_10, 1):
			nickname = user_data.get('nickname', 'Unknown')
			total_volume = user_data['total_volume']

			if i == 1:
				comment = " - –ö–æ—Ä–æ–ª—å"
			elif 2 <= i <= 3:
				comment = " - –ì–µ—Ä—Ü–æ–≥"
			elif 4 <= i <= 5:
				comment = " - –ú–∞—Ä–∫–∏–∑"
			elif 6 <= i <= 7:
				comment = " - –ì—Ä–∞—Ñ"
			elif 8 <= i <= 9:
				comment = " - –í–∏–∫–æ–Ω—Ç"
			elif i == 10:
				comment = " - –ë–∞—Ä–æ–Ω"

			message_text += f"{i}. {nickname}: {total_volume} –º–ª. {comment}\n"

		bot.send_message(message.chat.id, message_text)
	except Exception as e:
		bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
		bot.send_message(1130692453, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: /chai_top –≤ —á–∞—Ç–µ: {message.chat.id}. {e}")


def send_random_tea(message):
	user_id = str(message.from_user.id)
	user_nickname = message.from_user.first_name
	data = load_data()
	total_volume = data.get(user_id, {'total_volume': 0, 'last_drink_time': 0})

	if 'nickname' not in total_volume:
		total_volume['nickname'] = user_nickname

	time_since_last_drink = time.time() - total_volume['last_drink_time']
	time_left = max(0, 600 - time_since_last_drink)

	if time_since_last_drink < 600:
		remaining_minutes = int(time_left // 60)
		remaining_seconds = int(time_left % 60)
		bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining_minutes} –º–∏–Ω—É—Ç {remaining_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—à–∫–æ–π —á–∞—è.")
		return

	random_tea = random.choice(tea_names)
	random_volume = random.randint(200, 2000)
	bot.reply_to(message, f"{total_volume['nickname']} –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–∏–ª–∏ —á–∞–π\n\n–í—ã–ø–∏—Ç–æ: {random_volume} –º–ª.\n–ß–∞–π: {random_tea}\n\n–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_volume['total_volume'] + random_volume} –º–ª.")

	data[user_id] = {'total_volume': total_volume['total_volume'] + random_volume, 'last_drink_time': time.time(), 'nickname': user_nickname}
	save_data(data)


def knock_cards_function(message):
	user_id = str(message.from_user.id)
	user_nickname = message.from_user.first_name
	data = load_data_cards()
	user_data = data.get(user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
	user_data['points'] = int(user_data['points'])
	time_since_last_usage = time.time() - user_data['last_usage']
	time_left = max(0, 21600 - time_since_last_usage)

	with open('user_coins.json', 'r+') as file:
		data_coins = json.load(file)
		user_data_coins = data_coins.get(user_id, {})

	inventory = user_data_coins.get('purchases', [])

	default_wait = 21600
	if "–ë–∏–Ω–æ–∫–ª—å Carl Zeiss Jena 40x105." in inventory:
		default_wait = min(default_wait, 12060)
	if "–ë–∏–Ω–æ–∫–ª—å Fujinon 25x150 MT-SX" in inventory:
		default_wait = min(default_wait, 15300)
	if "–ë–∏–Ω–æ–∫–ª—å Celestron SkyMaster 25x100" in inventory:
		default_wait = min(default_wait, 18360)
	if "–ë–∏–Ω–æ–∫–ª—å Canon 18x50 IS All Weather" in inventory:
		default_wait = min(default_wait, 19440)

	if time_since_last_usage < default_wait:
		remaining_time = default_wait - time_since_last_usage
		remaining_hours = int(remaining_time // 3600)
		remaining_minutes = int(remaining_time // 60)
		remaining_seconds = int(remaining_time % 60)
		bot.reply_to(message, f"–í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å üò¥ {remaining_hours} —á–∞—Å–æ–≤ {remaining_minutes} –º–∏–Ω—É—Ç {remaining_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏!")
		return

	random_number = random.randint(1, 95)
	if 0 <= random_number <= 14 or ("–•–ª–µ–±, –û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –ø—Ç–∏—á–∫—É." in inventory and 0 <= random_number <= 30):
		eligible_birds = [bird for bird in birds if bird["rarity"] == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"]
	elif 15 <= random_number <= 29:
		eligible_birds = [bird for bird in birds if bird["rarity"] == "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
	elif 30 <= random_number <= 49:
		eligible_birds = [bird for bird in birds if bird["rarity"] == "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è"]
	elif 50 <= random_number <= 95:
		eligible_birds = [bird for bird in birds if bird["rarity"] == "–†–µ–¥–∫–∞—è"]

	if eligible_birds:
		chosen_bird = random.choice(eligible_birds)
		photo_data = chosen_bird['photo']
		if chosen_bird['name'] in user_data['birds']:
			with open(photo_data, 'rb') as photo_file:
				bot.send_photo(message.chat.id, photo_file, caption=f"–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–∫–∞ {chosen_bird['name']}! –ë—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏.\n–†–µ–¥–∫–æ—Å—Ç—å: {chosen_bird['rarity']}\n+{chosen_bird['points']} –æ—á–∫–æ–≤.\n–û–±–∏—Ç–∞–Ω–∏–µ: {chosen_bird['place']}\n\n–í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points'] + int(chosen_bird['points'])}")
			user_data['points'] += int(chosen_bird['points'])
		else:
			with open(photo_data, 'rb') as photo_file:
				bot.send_photo(message.chat.id, photo_file, caption=f"–ò–∑ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –ø—Ç–∏—Ü—É: {chosen_bird['name']}\n–†–µ–¥–∫–æ—Å—Ç—å: {chosen_bird['rarity']}\n–û—á–∫–∏: {chosen_bird['points']}\n–û–±–∏—Ç–∞–Ω–∏–µ: {chosen_bird['place']}")
			user_data['birds'].append(chosen_bird['name'])
			user_data['points'] += int(chosen_bird['points'])
		user_data['last_usage'] = time.time()
		data[user_id] = user_data
		save_data_2(data)

		if "–•–ª–µ–±, –û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –ø—Ç–∏—á–∫—É." in inventory:
			inventory.remove("–•–ª–µ–±, –û–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –ø—Ç–∏—á–∫—É.")
			data_coins[user_id]['purchases'] = inventory
		else:
			pass

		with open('user_coins.json', 'w') as file:
			json.dump(data_coins, file, indent=4)
			print("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_cards'))
def show_knock_cards(call):
	user_id = str(call.from_user.id)
	user_nickname = call.from_user.first_name
	unique_number = int(call.data.split('_')[-1])
	if user_button.get(user_id) != unique_number:
			bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
			return
	data = load_data_cards()
	user_data = data.get(user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
	collected_cards = len(user_data['birds'])
	total_cards = len(birds)
	if user_data['birds']:
		birds_owned_by_user = {bird['name'] for bird in birds if bird['name'] in user_data['birds']}
		rarities = {bird['rarity'] for bird in birds if bird['name'] in birds_owned_by_user}
		keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
		for rarity in rarities:
			keyboard.add(telebot.types.InlineKeyboardButton(text=rarity, callback_data=f'show_{rarity}'))
		try:
			bot.send_message(call.from_user.id, f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {collected_cards} –∏–∑ {total_cards} –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å:", reply_markup=keyboard)
			chat_type = call.message.chat.type
			if chat_type in ['group', 'supergroup']:
					bot.send_message(call.message.chat.id, f"{call.from_user.first_name}, –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
			else:
					pass
		except telebot.apihelper.ApiException as e:
				logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
				bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏!")
	else:
		bot.send_message(call.message.chat.id, "–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–±–ª—é–¥–∞–ª–∏ –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_'))
def show_cards(call):
	rarity = call.data[len('show_'):]
	user_id = str(call.from_user.id)
	user_nickname = call.from_user.first_name
	data = load_data_cards()
	user_data = data.get(user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
	rarity_cards = [bird for bird in birds if bird['name'] in user_data['birds'] and bird['rarity'] == rarity]

	if rarity_cards:
		for bird in rarity_cards:
			photo_data = bird['photo']
			caption = f"{bird['name']}\n–†–µ–¥–∫–æ—Å—Ç—å: {bird['rarity']}"
			if 'points' in bird:
				caption += f"\n–û—á–∫–∏: {bird['points']}"
			caption += f"\n–û–±–∏—Ç–∞–Ω–∏–µ: {bird['place']}"
			with open(photo_data, 'rb') as photo_file:
				chat_type = call.message.chat.type
				bot.send_photo(call.message.chat.id, photo_file, caption=caption)
	else:
		bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}")


def handle_stocoin(message):
	try:
		user_id = str(message.from_user.id)
		username = message.from_user.username
		current_time = time.time()

		try:
			with open("user_coins.json", 'r') as file:
				data = json.load(file)
		except FileNotFoundError:
			data = {}

		last_request_time = data.get(user_id, {}).get("last_request_time", 0)
		if current_time - last_request_time < 1500:  # 5 minutes cooldown
			remaining_time = 1500 - (current_time - last_request_time)
			minutes, seconds = divmod(remaining_time, 60)
			bot.reply_to(message, f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫—Ä–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(minutes)} –º–∏–Ω—É—Ç {int(seconds)} —Å–µ–∫—É–Ω–¥.")
			return

		coins = random.randint(1, 10)
		update_user_data(user_id, username, coins)

		with open("user_coins.json", 'r') as file:
			data = json.load(file)
		if user_id not in data:
			data[user_id] = {"username": username, "coins": coins, "purchases": [], "last_request_time": current_time}
		else:
			data[user_id]["last_request_time"] = current_time
		with open("user_coins.json", 'w') as file:
			json.dump(data, file, indent=4)

		bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {coins} –∑–æ–ª–æ—Ç—ã—Ö –∫—Ä–æ–Ω.")
	except Exception as e:
		bot.send_message(message.chat.id, f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ!")
		print(e)



def handle_shop(message):
	try:
		user_id = str(message.from_user.id)
		username = message.from_user.username
		current_time = time.time()
		unique_number = random.randint(1000, 99999999)
		user_button[user_id] = unique_number


		try:
			with open("user_coins.json", 'r') as file:
				data = json.load(file)
		except FileNotFoundError:
			bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
			return

		user_data = data.get(user_id, {})
		coins = user_data.get("coins", 0)

		last_request_time = user_data.get("last_request_time", 0)
		remaining_time = max(0, 1500 - (current_time - last_request_time))
		minutes, seconds = divmod(remaining_time, 60)

		if remaining_time > 0:
			time_message = f" –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–π–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."
		else:
			time_message = ""

		shop_message = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {coins} –∫—Ä–æ–Ω—ã." + time_message + "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
		markup = types.InlineKeyboardMarkup(row_width=8)
		for product_id, product_info in products.items():
			button = types.InlineKeyboardButton(text=product_info["name"], callback_data=f"buy_{product_id}_{unique_number}")
			markup.add(button)
		bot.send_message(message.chat.id, shop_message, reply_markup=markup)
	except Exception as e:
		bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} (–Ω–∞–ø–∏—à–∏—Ç–µ @AleksFolt)")


@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_buy_query(call):
	product_id, unique_number = call.data.split('_')[1:3]
	user_id = str(call.from_user.id)
	
	if user_button.get(user_id) != int(unique_number):
		bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
		return

	product = products[product_id]
	markup = types.InlineKeyboardMarkup()
	buy_button = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"confirm_{product_id}_{unique_number}")
	markup.add(buy_button)
	
	with open(product["image"], "rb") as photo:
		bot.send_photo(call.message.chat.id, photo, caption=f"{product['name']} - –¶–µ–Ω–∞: {product['price']} –∫—Ä–æ–Ω.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def confirm_purchase(call):
	user_id = str(call.from_user.id)
	product_id = call.data.split('_')[1]
	unique_number = int(call.data.split('_')[2])
	product = products[product_id]
	if user_button.get(user_id) != unique_number:
		bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
		return

	with open("user_coins.json", 'r') as file:
		data = json.load(file)

	if data[user_id]["coins"] >= product["price"]:
		if product["name"] in data[user_id]["purchases"]:
			bot.answer_callback_query(call.id, f"–ó–∞—á–µ–º —Ç–µ–±–µ –¥–≤–∞ —Ç–∞–∫–∏—Ö? ü§®")
			return
		data[user_id]["coins"] -= product["price"]
		data[user_id]["purchases"].append(product["name"])
		with open("user_coins.json", 'w') as file:
			json.dump(data, file, indent=4)
		bot.answer_callback_query(call.id, f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {product['name']}.")
	else:
		bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç—ã—Ö –∫—Ä–æ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ!")


def handle_goods(message):
	try:
		user_id = str(message.from_user.id)
		with open("user_coins.json", 'r') as file:
			data = json.load(file)
		purchases = data.get(user_id, {}).get("purchases", [])
		response = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n" + "\n".join(purchases) if purchases else "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏."
		bot.send_message(message.chat.id, response)
	except Exception as e:
		bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} (–Ω–∞–ø–∏—à–∏—Ç–µ @AleksFolt)")


def cards_top(message):
	try:
		inline_markup = InlineKeyboardMarkup()
		button_1 = InlineKeyboardButton(text="–¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º", callback_data="top_cards_cards")
		button_2 = InlineKeyboardButton(text="–¢–æ–ø –ø–æ –æ—á–∫–∞–º", callback_data="top_cards_point")
		inline_markup.add(button_1, button_2)
		bot.send_message(message.chat.id, "–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=inline_markup)
	except Exception as e:
		print(f"Error: {e}")
		bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('top_cards_'))
def cards_top_callback(call):
	choice = call.data.split('_')[2]
	data = load_data_cards()
	user_id = str(call.message.from_user.id)
	user_data = data.get(user_id, {'points': 0, 'birds': []})
	if choice == "cards":
		sorted_data = sorted(data.items(), key=lambda x: len(x[1].get('birds', [])), reverse=True)
		top_10 = sorted_data[:10]

		message_text = "–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
		for i, (user_id, user_data) in enumerate(top_10, 1):
			nickname = user_data.get('nickname', 'Unknown')
			num_cards = len(user_data.get('birds', []))
			message_text += f"{i}. {nickname}: {num_cards} –∫–∞—Ä—Ç–æ—á–µ–∫\n"

		bot.send_message(call.message.chat.id, message_text)
	elif choice == "point":
		sorted_data_points = sorted(data.items(), key=lambda x: x[1].get('points', 0), reverse=True)
		top_10 = sorted_data_points[:10]

		message_text = "–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤:\n\n"
		for j, (user_id, user_data) in enumerate(top_10, 1):
			nickname_2 = user_data.get('nickname', 'Unknown') 
			points = user_data.get('points', 0)
			message_text += f"{j}. {nickname_2}: {points} –æ—á–∫–æ–≤\n"

		bot.send_message(call.message.chat.id, message_text)


def handle_profile(message, background_image_path="background_image.jpg"):
		waiting = bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥–æ—á–∫—É...")
		user_id = message.from_user.id
		str_user_id = str(user_id)
		first_name = message.from_user.first_name
		last_name = message.from_user.last_name or ""
		data = load_data_cards()
		user_data = data.get(str_user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': first_name})
		collected_cards = len(user_data['birds'])
		total_cards = len(birds)
		try:
			with open("user_coins.json", 'r') as file:
				data_coin = json.load(file)
		except FileNotFoundError:
			bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
			return

		user_data_coin = data_coin.get(str_user_id, {})
		coins = user_data_coin.get("coins", 0)
		caption = f"üè° –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å {first_name} {last_name}\nüÉè –°–æ–±—Ä–∞–Ω–æ {collected_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {total_cards} –≤–æ–∑–º–æ–∂–Ω—ã—Ö.\nü™ô –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–æ–Ω: {coins} –∫—Ä–æ–Ω."

		user_profile_photos = bot.get_user_profile_photos(user_id, limit=1)
		if user_profile_photos.photos:
				photo = user_profile_photos.photos[0][-1]
				file_id = photo.file_id
				file_info = bot.get_file(file_id)
				downloaded_file = bot.download_file(file_info.file_path)
				avatar_stream = BytesIO(downloaded_file)
		else:
				avatar_stream = open("avatar.jpg", 'rb')

		avatar_image = Image.open(avatar_stream)

		if avatar_image.mode != 'RGBA':
				avatar_image = avatar_image.convert('RGBA')

		background_image = Image.open(background_image_path)
		if background_image.mode != 'RGBA':
				background_image = background_image.convert('RGBA')

		avatar_image = avatar_image.resize((378, 398), Image.Resampling.LANCZOS)

		x = 275
		y = 144
		background_image.paste(avatar_image, (x, y), avatar_image)

		final_image_stream = BytesIO()
		background_image.save(final_image_stream, format='PNG')
		final_image_stream.seek(0)
		final_image_stream.name = 'modified_image.jpg'

		unique_number = random.randint(1000, 99999999)
		user_button[str_user_id] = unique_number
		keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
		button_1 = telebot.types.InlineKeyboardButton(text="–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data=f'show_cards_{unique_number}')
		button_2 = telebot.types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫—Ä—É—Ç–∫—É", callback_data=f'crutka_cards_{unique_number}')
		keyboard.add(button_1, button_2)
		bot.delete_message(message.chat.id, waiting.message_id)
		bot.send_photo(message.chat.id, photo=final_image_stream, caption=caption, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith(f'crutka_cards'))
def crutki(call):
	unique_number = int(call.data.split('_')[-1])
	user_id = str(call.from_user.id)
	if user_button.get(user_id) != unique_number:
		bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
		return
	data = load_data_cards()
	user_nickname = call.from_user.first_name
	user_data = data.get(user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
	keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
	button_1 = telebot.types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f'buying_crutka_{unique_number}')
	keyboard.add(button_1)
	bot.send_message(call.message.chat.id, f"–ö—É–ø–∏—Ç—å –∫—Ä—É—Ç–∫—É. –¶–µ–Ω–∞: 35000 –ø–æ–∏–Ω—Ç–æ–≤:\n–ë–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points']}", reply_markup=keyboard)
	

@bot.callback_query_handler(func=lambda call: call.data.startswith('buying_crutka'))
def buy_crutka(call):
	user_id = str(call.from_user.id)
	unique_number = int(call.data.split('_')[-1])
	if user_button.get(user_id) != unique_number:
		bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
		return
	data = load_data_cards()
	user_nickname = call.from_user.first_name
	user_data = data.get(user_id, {'birds': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
	if user_data['points'] >= 35000:
		eligible_birds = [bird for bird in birds if bird["rarity"] == "–ö—Ä—É—Ç–∫–∞"]
		chosen_bird = None
		attempt_count = 0
		while attempt_count < 100:
			chosen_bird = random.choice(eligible_birds)
			if chosen_bird['name'] not in user_data['birds']:
				break
			attempt_count += 1
		
		if chosen_bird and chosen_bird['name'] not in user_data['birds']:
			user_data['birds'].append(chosen_bird['name'])
			user_data['points'] -= 35000
			data[user_id] = user_data
			save_data_2(data)
			photo_data = chosen_bird['photo']
			with open(photo_data, 'rb') as photo_file:
				bot.send_photo(call.message.chat.id, photo_file, caption=f"{user_nickname} –í–∞–º –≤—ã–ø–∞–ª–∞ {chosen_bird['name']}!")
		else:
			bot.send_message(call.message.chat.id, f"{user_nickname} –í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫—Ä—É—Ç–∫–∏.")
	else:
		bot.send_message(call.message.chat.id, f"{user_nickname} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")


def promocode(message):
	try:
		user_id = str(message.from_user.id)
		user_nickname = message.from_user.first_name
		data_chai = load_data()
		data_cards = load_data_cards()
		total_volume = data_chai.get(user_id, {'total_volume': 0, 'last_drink_time': 0})
		promo_1 = "ORMPRO782"
		promo_2 = "EDOCEPRM148"

		with open('promo.json', 'r') as json_file:
			data = json.load(json_file)

		if message.text == promo_1:
			if user_id in data and data[user_id] == promo_1:
				bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
			else:
				if 'nickname' not in total_volume:
					total_volume['nickname'] = user_nickname
				random_volume = random.randint(2000, 3000)
				data_chai[user_id] = {'total_volume': total_volume['total_volume'] + random_volume, 'last_drink_time': time.time(), 'nickname': user_nickname}
				save_data(data_chai)
				data[user_id] = promo_1
				with open('promo.json', 'w') as json_file:
					json.dump(data, json_file)
				bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –ò –ø–æ–ª—É—á–∏–ª–∏ {random_volume} –º–ª. —á–∞—è!")

		elif message.text == promo_2:
			if user_id in data and data[user_id] == promo_2:
				bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
			else:
				if user_id in data_cards:
					user_data_cards = data_cards[user_id]
					time_since_last_usage = time.time() - user_data_cards.get('last_usage', time.time())
					if time_since_last_usage >= 21600 or user_data_cards.get('last_usage', 0) == 0:
						bot.reply_to(message, "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥!")
					else:
						user_data_cards['last_usage'] = 0
						save_data_2(data_cards)
						data[user_id] = promo_2
						with open('promo.json', 'w') as json_file:
							json.dump(data, json_file)
						bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –õ–∏–º–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω!")
				else:
					bot.reply_to(message, "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥!")
	except Exception as e:
		print(e)



def send_files(chat_id, filenames):
    for filename in filenames:
        try:
            with open(filename, 'rb') as file:
                bot.send_document(chat_id, file)
        except Exception as e:
            bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")

@bot.message_handler(commands=['admin_send_files'])
def handle_send_files(message):
    try:
        filenames = message.text.split()[1:]
        if len(filenames) == 0:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return
        send_files(message.chat.id, filenames)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")



@bot.message_handler(func=lambda message: True)
def handle_text(message):
	try:
			if message.text == "/chai" or message.text == "—á–∞–π" or message.text == "–ß–∞–π":
				send_random_tea(message)
			elif message.text == "/chai_top" or message.text == "—á–∞–π —Ç–æ–ø" or message.text == "–ß–∞–π —Ç–æ–ø" or message.text == "–¢–æ–ø —á–∞—è" or message.text == "—Ç–æ–ø —á–∞—è":
				chai_top(message)
			elif message.text == "/knock" or message.text == "–∫–Ω–æ–∫" or message.text == "–ö–Ω–æ–∫" or message.text == "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É" or message.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É":
				knock_cards_function(message)
			elif message.text == "/krone" or message.text == "–∫—Ä–æ–Ω–∞" or message.text == "–ö—Ä–æ–Ω–∞" or message.text == "–º–æ–Ω–µ—Ç–∞" or message.text == "–ú–æ–Ω–µ—Ç–∞":
				handle_stocoin(message)
			elif message.text == "/shop" or message.text == "–º–∞–≥–∞–∑–∏–Ω" or message.text == "–ú–∞–≥–∞–∑–∏–Ω" or message.text == "—à–æ–ø" or message.text == "–®–æ–ø":
				handle_shop(message)
			elif message.text == "/goods" or message.text == "–ü–æ–∫—É–ø–∫–∏" or message.text == "–ø–æ–∫—É–ø–∫–∏":
				handle_goods(message)
			elif message.text == "/profile" or message.text == "–ü—Ä–æ—Ñ–∏–ª—å" or message.text == "–ø—Ä–æ—Ñ–∏–ª—å":
				handle_profile(message)
			elif message.text == "/cards_top" or message.text == "–¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫" or message.text == "—Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫":
				cards_top(message)
	except Exception as e:
			bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
			bot.send_message(1130692453, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")

try:
	bot.infinity_polling()
except Exception as e:
	print(f"–û—à–∏–±–∫–∞ {e}")
